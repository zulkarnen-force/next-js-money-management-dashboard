// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Relations
  accounts         Account[]
  sessions         Session[]
  transactions     Transaction[]
  categories       Category[]
  subcategories    Subcategory[]
  transactionTypes TransactionType[]

  createdAt DateTime @default(now())
  Wallet    Wallet[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id              String   @id @default(uuid())
  period          DateTime
  note            String?
  idr             Float?
  description     String?
  amount          Float
  currencyAccount String
  createdAt       DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subcategoryId String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  transactionTypeId String
  transactionType   TransactionType @relation(fields: [transactionTypeId], references: [id])
}

model Category {
  id            String        @id @default(uuid())
  name          String
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  subcategories Subcategory[]
  transactions  Transaction[]
}

model Subcategory {
  id           String        @id @default(uuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  categoryId   String
  category     Category      @relation(fields: [categoryId], references: [id])
  transactions Transaction[]
}

model TransactionType {
  id           String        @id @default(uuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Wallet {
  id           String        @id @default(uuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  createdAt    DateTime      @default(now())
}
